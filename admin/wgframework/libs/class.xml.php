<?php
/**
 * XML to Array and Back class
 * 
 * @package      WebGuru3
 * @subpackage   libs/
 * @author       Ondrej Rafaj
 * @author       Idea was taken from some (now) unknown library at phpclasses.org
 * @author       WebGuruCMS3 Framework CMS admin generator (http://www.webgurucms.com)
 * @version      1.0.0.0
 * @since        15. December 2008
 */
class xml {
	
	/**
	 * XML to Array.
	 * Converts the XML text that was generated by this class to an array.
	 * It can work with unidimensional and multidimensional associative arrays.
	 * 
	 * @param array $xmlToConver The xml text to be changed into an array.
	 * @return array
	 * @see _makeXmlToArray()
	 * @access public
	 */
	public static function xmlToArray($xmlToConver) {
        $parser = xml_parser_create();
		xml_parse_into_struct($parser, $xmlToConver, $arr_raw_xml);
		$arr_out = array();
		self::_makeXmlToArray($arr_raw_xml, $arr_out);
		return $arr_out;
	}

	/**
	 * XML to Array.
	 * Converts the XML text that was generated by this class to an array.
	 * It can work with unidimensional and multidimensional associative arrays.
	 * 
	 * @param string $path Path to the XML file to be changed into an array.
	 * @return array
	 * @see _makeXmlToArray().
	 * @access private
	 */
	public static function xmlFileToArray($path) {
		if (file_exists($path)) {
			$xml = wgIo::readFile($path);
			return self::xmlToArray($xml);
		}
		else return array();
	}

	/**
	 * Private XML to Array.
	 * Converts xml to array recursively.
	 * 
	 * @param arg_tags the raw array of tags got from xml_parse_into_struct is passed by reference to keep the position of the pointer in the array through function calls.
	 * @param arg_current_tag the current array to be filled is passed by reference because it is changed within the function.
	 * @return Array.
	 * @access private
	 */
	private static function _makeXmlToArray(&$arg_tags, &$arg_current_tag) {
		while (list(, $arr_tag) = each($arg_tags)) {
			if($arr_tag['level'] > 1) {
				if ($arr_tag['type']=="complete") {		
					$arg_current_tag[$arr_tag['attributes']['KEY']] = $arr_tag['value'];
				} 
				elseif ($arr_tag['type']=="open") {
					self::_makeXmlToArray($arg_tags, $arg_current_tag[$arr_tag['attributes']['KEY']]);
				} 
				elseif ($arr_tag['type']=="close") {
					return;
				}	// end if type
			}	// end if level > 1
		}	// end while arg_tags		
	}

	/**
	 * Sets padding in xml text.
	 * Helps to make the xmlcode readable but can be disabled by emptying arg_str_pad when we do not need to read the xml code.
	 * 
	 * @param int $arg_int_pad_number The number of indentation pads in this tag.
	 * @param int $arg_str_pad The single pad size.
	 * @return String pad.
	 * @access private
	 */
	private static function pad($arg_int_pad_number=0, $arg_str_pad='', $newLine=true) {
		if (($arg_int_pad_number===0) || ($arg_str_pad==='')) return '';
		$i = 0;
		$str_pad = '';
		while ($i < $arg_int_pad_number) {
			$str_pad .= $arg_str_pad;
			$i++;
		}
		return (($str_pad && $newLine) ? "\n" . $str_pad : '');
	}

	/**
	 * Private Array to XML.
	 * changes php arrays into xml text recursively.
	 * 
	 * @param arg_arr_array the array to be changed into XML.
	 * @param arg_int_pad_number the number of pads of the current tag.
	 * @param arg_str_pad the indentation pad text.
	 * @return String xml text.
	 * @see array_to_xml().
	 * @access private
	 */
	private static function _makeArrayToXml($arg_arr_array, $arg_int_pad_number=0, $arg_str_pad="") {
		$str_xml = "";
		while(list($k, $v) = each($arg_arr_array)) {
			$str_xml .= self::pad($arg_int_pad_number, $arg_str_pad) . "<a key=\"" . htmlspecialchars($k) . "\">";
			if (is_array($v)) {
				$str_xml .= self::_makeArrayToXml($v, $arg_int_pad_number+1, $arg_str_pad);
				$newLine = true;
			}
			else {
				$str_xml .= self::pad($arg_int_pad_number+1) . htmlspecialchars($v);
				$newLine = false;
			}
			$str_xml .= self::pad($arg_int_pad_number, $arg_str_pad, $newLine) . "</a>";
		}
		return $str_xml;
	}

	/** 
	 * Array to XML.
	 * changes php arrays into xml text recursively.
	 * 
	 * @param array $arg_arr_array The array to be changed into XML.
	 * @param string $arg_str_operation_name The name of the main xml tag.
	 * @param string $arg_str_pad The indentation pad text.
	 * @return String Xml text.
	 * @see _makeArrayToXml().
	 * @access public
	 */
	public static function arrayToXml($arrayToConvert, $baseTag='response', $paddingTag="\t") {
		if (!is_array($arrayToConvert)) return false;
		$str_xml = "<$baseTag>";
		$str_xml .= self::_makeArrayToXml($arrayToConvert, 1, $paddingTag);
		$str_xml .= ($paddingTag==='' ? '' : "\n") . "</$baseTag>";
		return '<?xml version="1.0" encoding="utf-8"?>'."\n".$str_xml;
	}
}
?>
